# Package.json Configuration Decisions

## Project Configuration

**Package Type:** Standard Node.js project with development tooling
- [npm documentation](https://docs.npmjs.com/cli/v10/configuring-npm/package-json)
- Project dependencies and dev dependencies
- Development workflow scripts (`dev:*`, `lint:*`)

## Script Architecture

### Development Container Scripts (`dev:*`)
- `dev:up`, `dev:shell`, `dev:down` for container lifecycle management
- User parameterization through `CLAUDE_USER` environment variable
- Docker Compose integration for consistent development environment

### Markdown Linting Workflow (`lint:*`)

**Decision: Auto-fix before linting**
The `npm run lint:md` command runs auto-fix first, then checks for remaining issues.

**Rationale:**
- Most markdown issues are auto-fixable formatting problems
- Running auto-fix first eliminates noise and shows only meaningful issues
- Streamlines the development workflow by handling routine formatting automatically
- Maintains consistency with the project's emphasis on automation over manual intervention

**Implementation:**
```bash
"lint:md": "markdownlint-cli2 '**/*.md' '!**/node_modules/**' '!**/.prompts/**' '!**/.templates/**' --fix && markdownlint-cli2 '**/*.md' '!**/node_modules/**' '!**/.prompts/**' '!**/.templates/**'"
```

### Doctor Script Integration
- Environment validation through `scripts/doctor.sh`
- Progressive validation system for development setup
- Multi-user container validation

## Development Dependencies

**markdownlint-cli2:** Markdown linting with auto-fix capabilities
**husky:** Git hooks for pre-commit quality checks

This configuration ensures developers see only issues requiring manual attention, consistent with the project's auto-fix + quality-critical approach to development tooling.